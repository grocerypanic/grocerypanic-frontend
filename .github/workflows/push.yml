name: panic_fe-Automation

# Secrets:

#  PRODUCTION_FIREBASE_PROJECT
#  PRODUCTION_FIREBASE_TOKEN
#  PRODUCTION_REACT_ENV
#  SLACK_WEBHOOK

on:
  push:
  schedule:
    - cron: "0 6 * * 1"
  workflow_dispatch:
    inputs:
        MAINTENANCE:
          description: 'Enable Maintenance Mode'
          required: true
          default: 'false'

env:
  ORGNAME: grocerypanic
  REPONAME: grocerypanic-frontend
  WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
  NODE_VERSION: "14"

jobs:

  ci:
    runs-on: ubuntu-20.04

    steps:
      - name: CI -- Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
    
      - name: CI -- Start Workflow
        run: |
          ./.github/workflows/scripts/notifications.sh ":white_check_mark: CI workflow has started!"

      - name: Release -- Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      
      - name: CI -- Git Leaks     
        uses: zricethezav/gitleaks-action@v1.6.0

      - name: CI -- Install Node Modules
        run: |
          npm install

      - name: CI -- Run Linter
        run: |
          npm run lint

      - name: CI -- Scan Dependencies
        run: |
          npm audit --production

      - name: CI -- Unit Tests and Coverage
        run: |
          npm run coverage

      - name: CI -- Report Job Status (Success)
        run: |
          ./.github/workflows/scripts/notifications.sh ":white_check_mark: Build was successful!"

      - name: CI -- Report Job Status (Failure)
        if: failure()
        run: |
          ./.github/workflows/scripts/notifications.sh ":x: Build has failed!"

      - name: CI -- Stage -- Configure Build 
        if: github.ref == 'refs/heads/master'
        run: |
          echo "${REACT_ENV}" > .env.production.local
        env:
          REACT_ENV: ${{ secrets.STAGE_REACT_ENV }}

      - name: CI -- Stage -- Toggle Maintenance Mode on Manual Dispatch
        if: github.ref == 'refs/heads/master' && github.event_name == 'workflow_dispatch'
        run: |
          echo "REACT_APP_MAINTENANCE=\"${MAINTENANCE}\"" >> .env.production.local
        env:
          MAINTENANCE: ${{ github.event.inputs.MAINTENANCE }}

      - name: CI -- Stage -- Shut off Maintenance Mode on Automated Push
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: |
          echo "REACT_APP_MAINTENANCE=\"false\"" >> .env.production.local

      - name: CI -- Stage -- Build 
        if: github.ref == 'refs/heads/master'
        run: |
          npm run build

      - name: CI -- Stage -- Automated Deploy        
        if: github.ref == 'refs/heads/master'
        uses: w9jds/firebase-action@v11.22.0
        with:
          args: deploy --only hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.STAGE_FIREBASE_TOKEN }}
          PROJECT_ID: ${{ secrets.STAGE_FIREBASE_PROJECT }}        

      - name: CI -- Stage -- Report Success
        if: github.ref == 'refs/heads/master'
        run: |
          ./.github/workflows/scripts/notifications.sh ":white_check_mark: Deploy to stage was successful!"

      - name: CI -- Stage -- Report Failure
        if: failure() && github.ref == 'refs/heads/master'
        run: |
          ./.github/workflows/scripts/notifications.sh ":x: Deploy to stage has failed!"          
   
      - name: CI -- Production -- Prepare Release Content
        if: contains(github.ref, '/tags/v')
        run: |
          NEWTAG=${GITHUB_REF#refs/tags/}
          echo "NEWTAG=${NEWTAG}" >> $GITHUB_ENV

      - name: CI -- Production -- Generate Changelog
        if: contains(github.ref, '/tags/v')
        run: |
          source .github/workflows/scripts/changelog.sh

      - name: CI -- Production -- Generate GitHub Release Draft
        if: contains(github.ref, '/tags/v')
        id: create_release
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const script = require('./.github/scripts/release.js')
            const body = process.env.CHANGE_LOG_CONTENT + "\n" + process.env.CHECKLIST; 
            const tag = process.env.NEWTAG;
            await script({ body, context, core, github, tag })
        env:
          CHECKLIST: |
            ## Deployment Checklist    
            - [ ] Review Commit History
            - [ ] Ensure minimum API version is noted
            - [ ] Perform basic QA tests (register, add store, add shelf, add items)
            - [ ] Perform basic QA on Mobile (same tasks)
            - [ ] Visual inspection of recent activity charts in stage

      - name: CI -- Production -- Checkout Production Branch
        if: contains(github.ref, '/tags/v')
        run: |
          git checkout origin/production

      - name: CI -- Production -- Ensure Build Succeeds
        if: contains(github.ref, '/tags/v')
        run: |
          echo "${REACT_ENV}" > .env.production.local
          npm run build
        env:
          REACT_ENV: ${{ secrets.PRODUCTION_REACT_ENV }}

      - name: CI -- Production -- Report Success
        if: contains(github.ref, '/tags/v')
        run: |
          ./.github/workflows/scripts/notifications.sh ":white_check_mark: Automated release generated:\nhttps://github.com/${ORGNAME}/${REPONAME}/releases"
        env:
          TAG: ${{ env.NEWTAG }}

      - name: CI -- Production -- Report Failure
        if: failure() && contains(github.ref, '/tags/v')
        run: |
          ./.github/workflows/scripts/notifications.sh ":x: Automated release generation has failed!"
