name: panic_fe-Automation

on:
  push:
  schedule:
    - cron: "0 6 * * 1"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set TimeZone
        run: |
          sudo timedatectl set-timezone "America/Toronto"
      - name: Install Node Modules
        run: |
          npm install
      - name: Run Linter
        run: |
          npm run lint
      - name: Sec Test
        run: |
          npm audit --audit-level=moderate
      - name: Unit Tests and Coverage
        run: |
          npm run coverage
      - name: Report Job Status
        if: ${{ failure() }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"panic_fe: build has failed!"}' "${WEBHOOK_URL}"
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      - name: Stage -- Build 
        if: ${{ github.ref == 'refs/heads/develop' && github.event_name == 'push' }}
        run: |
          echo "${REACT_ENV}" > .env.production.local
          npm run build
        env:
          REACT_ENV: ${{ secrets.STAGE_REACT_ENV }}

      - name: Stage -- Automated Deploy        
        if: ${{ github.ref == 'refs/heads/develop' && github.event_name == 'push' }}
        uses: w9jds/firebase-action@v1.5.0
        with:
          args: deploy --only hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.STAGE_FIREBASE_TOKEN }}
          PROJECT_ID: ${{ secrets.STAGE_FIREBASE_PROJECT }}        
      - name: Stage -- Report Success
        if: ${{ github.ref == 'refs/heads/develop' && github.event_name == 'push' }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"panic_fe: automated deploy to stage!"}' "${WEBHOOK_URL}"
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      - name: Stage -- Report Failure
        if: ${{ failure() }}
        run: |
          [[ ${REF} == 'refs/heads/develop' ]] && [[ ${EVENT} == 'push' ]] && curl -X POST -H 'Content-type: application/json' --data '{"text":"panic_fe: stage deploy has failed!"}' "${WEBHOOK_URL}"
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          REF: ${{ github.ref }}
          EVENT: ${{ github.event_name }}

      - name: Production -- Prepare Release
        if: contains(github.ref, 'tag')
        run: |          
          LAST=$(git tag | sort | tail -n2 | head -n1)
          echo "::set-env name=LATEST::${LATEST}"
          CHANGELOG=$(git log --pretty=%s ${LATEST}...HEAD)
          echo "::set-env name=CHANGELOG::${CHANGELOG}"
          NEWTAG=${GITHUB_REF#refs/tags/}
          echo "::set-env name=NEWTAG=${NEWTAG}"
      - name: Production -- Create Release
        if: contains(github.ref, 'tag')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEWTAG }}
          release_name: Release ${{ env.NEWTAG }}
          body: ${{env.CHANGELOG}}
          draft: false
          prerelease: false
