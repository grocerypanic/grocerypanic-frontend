name: panic_fe-Automation

on:
  push:
  schedule:
    - cron: "0 6 * * 1"
  workflow_dispatch:
    inputs:
        MAINTENANCE:
          description: 'Enable Maintenance Mode'
          required: true
          default: 'false'

jobs:
  push:
    runs-on: ubuntu-20.04

    strategy:
      matrix:
        node-version: [14.x]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: niall-byrne/gitleaks-action@master
      - name: Install Node Modules
        run: |
          npm install
      - name: Run Linter
        run: |
          npm run lint
      - name: Sec Test
        run: |
          npm audit --audit-level=moderate
      - name: Unit Tests and Coverage
        run: |
          npm run coverage
      - name: Report Job Status (Success)
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"panic_fe: build has succeeded!"}' "${WEBHOOK_URL}"
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      - name: Report Job Status
        if: failure()
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"panic_fe: build has failed!"}' "${WEBHOOK_URL}"
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

      - name: Stage -- Configure Build 
        if: github.ref == 'refs/heads/master'
        run: |
          echo "${REACT_ENV}" > .env.production.local
        env:
          REACT_ENV: ${{ secrets.STAGE_REACT_ENV }}
      - name: Stage -- Toggle Maintenance Mode on Manual Dispatch
        if: github.ref == 'refs/heads/master' && github.event_name == 'workflow_dispatch'
        run: |
          echo "REACT_APP_MAINTENANCE=\"${MAINTENANCE}\"" >> .env.production.local
        env:
          MAINTENANCE: ${{ github.event.inputs.MAINTENANCE }}
      - name: Stage -- Shut off Maintenance Mode on Automated Push
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: |
          echo "REACT_APP_MAINTENANCE=\"false\"" >> .env.production.local
      - name: Stage -- Build 
        if: github.ref == 'refs/heads/master'
        run: |
          npm run build
      - name: Stage Maintenance -- Automated Deploy        
        if: github.ref == 'refs/heads/master'
        uses: w9jds/firebase-action@v1.5.0
        with:
          args: deploy --only hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.STAGE_FIREBASE_TOKEN }}
          PROJECT_ID: ${{ secrets.STAGE_FIREBASE_PROJECT }}        

      - name: Stage -- Report Success
        if: github.ref == 'refs/heads/master'
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"panic_fe: automated deploy to stage!"}' "${WEBHOOK_URL}"
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
      - name: Stage -- Report Failure
        if: failure() && github.ref == 'refs/heads/master'
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"panic_fe: stage deploy has failed!"}' "${WEBHOOK_URL}"
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
   
      - name: Production -- Prepare Release Content
        if: contains(github.ref, '/tags/v')
        run: |
          NEWTAG=${GITHUB_REF#refs/tags/}
          echo "NEWTAG=${NEWTAG}" >> $GITHUB_ENV
      - name: Production -- Generate Changelog
        if: contains(github.ref, '/tags/v')
        uses: scottbrenner/generate-changelog-action@v1.3.1
        id: Changelog
        env:
          REPO: ${{ github.repository }}
      - name: Production -- Create Release
        if: contains(github.ref, '/tags/v')
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEWTAG }}
          release_name: Release ${{ env.NEWTAG }}
          body: |
            ${{ steps.Changelog.outputs.changelog }}
            ## Deployment Checklist    
            - [ ] Review Commit History
            - [ ] Ensure minimum API version is noted
            - [ ] Perform basic QA tests (register, add store, add shelf, add items)
            - [ ] Perform basic QA on Mobile (same tasks)
            - [ ] Visual inspection of recent activity charts in stage
          draft: 'true'
          prerelease: false

      - name: Production -- Checkout Production Branch
        if: contains(github.ref, '/tags/v')
        run: |
          git checkout origin/production
      - name: Production -- Ensure Build Succeeds
        if: contains(github.ref, '/tags/v')
        run: |
          echo "${REACT_ENV}" > .env.production.local
          npm run build
        env:
          REACT_ENV: ${{ secrets.PRODUCTION_REACT_ENV }}
      - name: Production -- Report Success
        if: contains(github.ref, '/tags/v')
        run: |
          curl -X POST -H 'Content-type: application/json' --data "{\"text\":\"panic_fe: automated release has been created for ${TAG}: https://github.com/niall-byrne/panic-fe/releases\"}" "${WEBHOOK_URL}"
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
          TAG: ${{ env.NEWTAG }}
      - name: Production -- Report Failure
        if: failure() && contains(github.ref, '/tags/v')
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"panic_fe: automated production release has failed!"}' "${WEBHOOK_URL}"
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
