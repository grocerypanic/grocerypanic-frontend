name: panic_fe-ProductionDeploys

# Secrets:

#  PRODUCTION_FIREBASE_PROJECT
#  PRODUCTION_FIREBASE_TOKEN
#  PRODUCTION_REACT_ENV
#  SLACK_WEBHOOK

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      MAINTENANCE:
        description: 'Enable Maintenance Mode'
        required: true
        default: 'false'
      TAG:
        description: 'Tag to Deploy'
        required: true
        default: ''

env:
  ORGNAME: grocerypanic
  REPONAME: grocerypanic-frontend
  WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

jobs:

  release:
    runs-on: ubuntu-20.04
    
    steps:      
      
      - name: Release -- Code Checkout (Dispatch)
        if: github.event_name == 'workflow_dispatch'
        uses: actions/checkout@v2         
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.TAG  }}
      
      - name: Release -- Code Checkout (Release Approval)
        if: github.event_name != 'workflow_dispatch'
        uses: actions/checkout@v2         
        with:
          fetch-depth: 0

      - name: Release -- Install Node Modules
        run: |
          npm install
      
      - name: Release -- Production -- Configure Build 
        run: |
          echo "${REACT_ENV}" > .env.production.local
        env:
          REACT_ENV: ${{ secrets.PRODUCTION_REACT_ENV }}

      - name: Release -- Production -- Toggle Maintenance Mode (Dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "REACT_APP_MAINTENANCE=\"${MAINTENANCE}\"" >> .env.production.local
        env:
          MAINTENANCE: ${{ github.event.inputs.MAINTENANCE }}

      - name: Release -- Production -- Shut off Maintenance Mode (Release Approval)
        if: github.event_name != 'workflow_dispatch'
        run: |
          echo "REACT_APP_MAINTENANCE=\"false\"" >> .env.production.local

      - name: Release -- Production -- Build 
        run: |
          npm run build

      - name: Release -- Production -- Automated Deploy        
        uses: w9jds/firebase-action@v2.0.0
        with:
          args: deploy --only hosting
        env:
          FIREBASE_TOKEN: ${{ secrets.PRODUCTION_FIREBASE_TOKEN }}
          PROJECT_ID: ${{ secrets.PRODUCTION_FIREBASE_PROJECT }} 
      
      - name: Release -- Production -- Report Success
        run: |
          ./.github/workflows/scripts/notifications.sh ":white_check_mark: Deploy to production was successful!"

      - name: Release -- Production -- Report Failure
        if: failure()
        run: |
          ./.github/workflows/scripts/notifications.sh ":x: Deploy to production has failed!"
